"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-autwwg5p8xr%r$70#7l=(f92nd7$jsvuc250t@ajvk@1ua0$a3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework', #nakładka na django, aby zarządzać łatwiej api
    'corsheaders', #zarządza polityką corsów
    'api',
    'rest_framework_simplejwt', #tokeny autoryzacji
    'drf_yasg'
]
#autoryzacja JWT
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication', #metoda autentykacji   
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  #klasy uprawnień pod view, aby blokować innych
    ],
}
#konfiguracja JWT
SIMPLE_JWT = {
   'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),    # Czas życia tokenu dostępu 5 minut
   'REFRESH_TOKEN_LIFETIME': timedelta(days=1),      # Czas życia tokenu odświeżenia 1 dni
   'ROTATE_REFRESH_TOKENS': False,                   # Nie rotować tokenów odświeżenia (token sie nie zmienia)
   'BLACKLIST_AFTER_ROTATION': True,                # Czarna lista po rotacji tokenów (stare tokeny tu trafiają)
   'ALGORITHM': 'HS256',                             # Algorytm szyfrowania 
   'SIGNING_KEY': SECRET_KEY,                        # Klucz podpisu 
   'AUTH_HEADER_TYPES': ('Bearer',),                 # Typ nagłówka autoryzacyjnego
}
#AUTH_USER_MODEL to ustawienie w Django, które pozwala na określenie niestandardowego
#modelu użytkownika, który będzie używany w aplikacji zamiast domyślnego modelu User dostarczanego przez Django.
AUTH_USER_MODEL = 'api.SystemUser'
#jest jakiś flow i wstrzykujemy się w środek danego flow - zarządzanie żądaniami i odpowiedziami
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

SWAGGER_SETTINGS = {
    'LOGIN_URL': None,  # Wyłącza Django Login
    'LOGOUT_URL': None,  # Wyłącza Django Logout
    'USE_SESSION_AUTH': False,  # Wyłącza autoryzację sesji (ukrywa przycisk login)
}

#na jakie połączenia nam pozwala backend, by się widziały
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080",  # React frontend
]


ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql', #nasza maszyna do odpalania
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': 'newpassword',
        'HOST': 'postgres', # gdy uruchamiamy z wykorzystaniem docker-compose !!! nazwa z dockera gdy odpalamy na swoim kompie, jak sieciowo to nazwa
        #'HOST': 'localhost', # gdy uruchamiamy lokalnie !!!                                                                          z dockercompose
        'PORT': '5432',
        
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
